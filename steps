steps:

Create an HTML FILE with Meta, Links and Scripts in the head: 
	<!-- /////////////////////////========METAS=======\\\\\\\\\\\\\\\\\\\\\\\\\\\ -->
  <meta charset="UTF-8">
  
  <!-- /////////////////////////========LINKS: Bootstrap, FontAwesome, ? =======\\\\\\\\\\\\\\\\\\\\\\\\\\\ -->
  <link rel="stylesheet" href="../bower_components/bootstrap/dist/css/bootstrap.min.css" />

  <!-- /////////////////////////========SCRIPTS: Angular, Jquery, MainJs File,  =======\\\\\\\\\\\\\\\\\\\\\\\\\\\ -->
  <script type="text/javascript" src="../bower_components/angular/angular.min.js"> </script>
  <script src="../bower_components/angular-route/angular-route.min.js"></script>
  <script src="../bower_components/angular-resource/angular-resource.min.js"></script>
  <script src="app.js"></script>  
Create a MAIN JS file: 


Create a HEADER	in the body of ur html file using bootstrap with a navbar nav, with a container div in it, with a navbar-header div and nav ul in it:
	<header>
		<nav class="navbar navbar-default "  >
		<div class="container "  >
			<div class="navbar-header "  >
				<a href="/" class="navbar-brand "  >Beather</a>
			</div>
			<ul class="nav navbar-nav navbar-right "  >
				<li><a href="#/"><i class="fa fa-home "  ></i> Home</a> </li>
			</ul>
		</div>
		</nav>
	</header> 

Create an EMPTY CONTAINER below the header: 
	<div class="container "  >
		
	</div>

MAKE IT AN ANGULAR APP by telling angularJS to start looking at our html as an angularJS app by:
	Declaring a var that goes into the global namespace:
	In js file: 
		var beatherApp = angular.module('beatherApp', []

		);
	And put a directive in the html to tell it what app we're using: 
		<html ng-app="beatherApp">

	rf & check for errors in the browser console. 

USE THE ANGULAR DEPENDENCIES by declaring them: 
	Specifically ng-route and ng-resource, 
	Ur ang module should look like this: 
	var beatherApp = angular.module('beatherApp', ['ngRoute', 'ngResource']
	rf for errors. 

SET UP ROUTING for SPA that has two pages, a home & a forcast page. 
	Create two htm pages inside of a new pages folder. 
	Create two controllers:
		app.controller('homeController', ['$scope', function($scope){
		}]);

		beatherApp.controller('forcastController', ['$scope', function($scope){
		}]);
	Create routes to connect them. 
		In ur app.js file: 
			app.config(function ($routeProvider){
			$routeProvider
			.when('/', {
				templateUrl: 'pages/home.htm',
				controller: 'homeController'
			})
			.when('/forecast', {
				templateUrl: 'pages/forecast.htm',
				controller: 'forecastContoller'
			})
			
	Tell ur index view that ur doing a SPA: 
		By putting the ng-view directive inside of ur container div in the index.htm file like:
			<div ng-view></div>

	rf and should see home.htm and when u add '/forecast' to url, should see forcast.htm page. 

Create a FORM with an input box and button on the home page: 
	<div class="row" style="background: darkblue" >
		<div class="col-md-6 col-md-offset-3" style="background: lightyellow">
			<h4>Forecast by City </h4>
			<div class="form-group"  >
				<input type="text" class="form-control"  />
			</div>
			<a href="#/forecast" class="btn btn-primary" >Get Forecast</a>

		</div>
	</div>

	Test it. click button, should go to forcast page and click home from forecast pg & should take u back to home. 

Build the ABILITY TO SHARE DATA BETWEEN PAGES of forecast and home so you can input a city into the text box on home page and have it show up on the forecast page: 
	So you need to get a city name in ur scope for both pages. So on the home page, bind the text box to the city name for the scope, and then interpolate it on the forecast page using a custom service:
	Create a custom service: 
		beatherApp.service('cityService', function() {
		this.city = "Del Ray, FL";
		});
	Add/inject that service to each of ur controllers and put the city model in them:
		beatherApp.controller('forecastController', ['$scope', 'cityService', function($scope, cityService){
		$scope.city = cityService.city;
		}]);
	Then add a watcher in the home controller to update the city model when it is changed in the text box: 
		$scope.$watch('city', function(){
			cityService.city = $scope.city;
		});
			
	Now do the binding for this model: 
		Add: 
		ng-model="city"
		to the input box. 
	Now do the interpolation: 
		On the forecast page: 
			Forecast for {{city }}

Bind OUTSIDE DATA to the page: 
	Use ngResource to get data off the internet by
		Putting the resource service in the controller that you'll be getting the data in, 
			Which is forecast controller. First line should look like this: 
				beatherApp.controller('homeController', ['$scope', '$resource', 'cityService', function($scope, $resource, cityService){
	Put a var on your scope that will have the call in it and go get the json data: 
		$scope.weatherApi = 
		$resource("http://api.openweathermap.org/data/2.5/forecast/daily?APPID=d8f5102c89d08caf442ba64a6bcda871", 
			{
				callback: "JSON_CALLBACK" //this and the method below just says "it's ok to get this data. it's not a hack attempt."
			},
			{
				get: 
					{
						method: "JSONP"
					}
			}
		);
	Now that you have the data in the above var, create another var that will call it and get the data that you NEED out of it and put it into a var?: 
		$scope.weatherResult = $scope.weatherApi.get( 
			{
				q: $scope.city,
				cnt: 2
			});
	Console log the weather result to see what it looks like and play with the object in the console with: 
				console.log($scope.weatherResult);

Bind this data to the screen by repeating each line of data in the list: 
	On our forcast page: 
	Create a div with ng-repeat in it that set's 'w' to the weatherResult's list and 
	a row inside of that and 
	a col-md-12 inside of that and 
	panel panel-default inside of that and 
	panel-heading inside of that and 
	a panel-title h3 inside of that which has the date interpolated in it and 
	under the panel-heading div, a panel-body div with the daytime temp interpolated inside of it: 
	rf and should see 2 panels.
	should look like this:
		<div ng-repeat="w in weatherResult.list"  >
			<div class="row "  >
				<div class="md-col-12 "  >
					<div class="panel panel-default "  >
						<div class="panel-heading "  >
							<h3 class="panel-title "> Date: {{w.dt}}</h3> 
						</div>
						<div class="panel-body "  >Daytime Temp: {{w.temp.day}}	</div>
					</div>
				</div>
			</div>
		</div>

Pretty up the dates and temps:
	By creating some methods that format the date and time nicer...
	*** This is not done in these steps. Maybe fill in later. Skip for now. 
	Should look like this when done? :

Add some numbers that we can click on to choose how many days to display: 
	Make it so you can pass a number to the url as a parameter: 
		In routes:
			Add a new route that accepts a days parameter by: 
				Creating a pattern match that looks for a variable name after the /forecast with: 
					:days so a third route should look like this: 
							.when('/forecast/:days', {
								templateUrl: 'pages/forecast.htm',
								controller: 'forecastController'
							});
			To get that var in your url, add the $routeParams service to the controller that ur in: 
				So add $routeParams in the controller dependencies.
				Add a new scope property called 'days' which is simply the new 'days' route to output to the screen and include a default:
					$scope.days = $routeParams.days || '2'; 				
				Then update the count property of the ojbect in the weatherResult variable to be this new 'days' property so that it changes dynamically: 
					So cnt: $scope.days instead of cnt: 2
				rf and add some numbers to the end of the url to make sure it gives you different days. 
			Add some numbers to ur html that you can click on to get different days:
				<hr />
				Days: <a href="#/forecast/2" >2</a> | <a href="#/forecast/3" >3</a> | <a href="#/forecast/4" >4</a>
				<br>
				rf test
			Make it so that the number that ur on is highlighted:
				Use the ng-class directive to change which class appears on a particular element: 
				Should look like: 
					<hr />
					Days: <a href="#/forecast/2" ng-class="{'bg-primary': days === '2' }"  >2</a> | <a href="#/forecast/3" ng-class="{'bg-primary': days === '3' }">3</a> | <a href="#/forecast/4" ng-class="{'bg-primary': days === '4' }" >4</a>
					<br>

Put a Back to Search link at the top of this forecast page: 

Make the date and temp panel html a CUSTOM DIRECTIVE: 
	Create a Directives folder.
	Create a new file in it called weatherReport.html
	Cut and paste the panel html from the forecast page into the new custom directive html page. 
	Define/create the custom directive in ur js file: 
		beatherApp.directive("weatherResult", function() {
			return {
		
			}
		})
		Restrict it to only be an html element. 
			Add:
			restrict: 'E', 
			to the return object. 
		Add the templateUrl to the return object:
			templateUrl: 'directives/weatherReport.html',
		Make it so the contents of the directive replace the placeholder completely with: 
			replace: true,
		Isolate the scope by: 
			Add the weatherResult directive to the html you wnat to replace on the forecast page as an element: 
				<weather-result></weather-result>
			Use the object 'w' (which contains the date and list of tempuratures) and 
			pass an object to ur weather-result custom directive in ur html
			poke a hole in ur isolated scope using attriubutes on the directive
				make each of the 'w's weatherDay by: 
					weatherDay: "=",
					Then in the custom element add weather-day="w"

Move ur Routes, services, controllers and directives to a routes.js file and add a script to it on ur index html page after the app.js script.

----End----











